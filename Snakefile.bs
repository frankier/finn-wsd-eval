## Bootstrapping

from os.path import exists

cnf("BOOTWORK", WORK + "/bootstrap")
cnf("SEED", "42")
cnf("ITERS", "100000")

AWE_NN_VAR, = glob_wildcards(GUESS + "/awe_nn.{awe_nn_var,[^/]+}/")
SUPWSD_VAR, = glob_wildcards(GUESS + "/supwsd.{supwsd_var,[^/]+}.x1st/")
LESK_VAR, = glob_wildcards(GUESS + "/lesk.{lesk_var,[^/]+}/")
LESK_PP_VAR, = glob_wildcards(GUESS + "/lesk_pp.{lesk_pp_var,[^/]+}/")

# Utils

def nicks_of_selected(selected):
    nicks = []
    for _label, filter in selected:
        for nick in SnakeMake.get_nicks(filter):
            nicks.append(nick)
    return nicks


def cmp_inputs(wildcards):
    from wsdeval.selectedexps import UNSUP_SELECTED, SUP_SELECTED

    def sup_var():
        train, test = wildcards.cmp_var.split("-")
        return train + "-train/" + test + "-dev.pkl"

    def unsup_var():
        test = wildcards.cmp_var
        return test + "-dev.pkl"

    if wildcards.cmp == "over":
        result = []
        # Add supervised
        result.extend((
            BOOTWORK + "/resamples/" + nick + "/" + training_corpus + "-train/{cmp_var,[^/]+}.pkl"
            for nick in nicks_of_selected(SUP_SELECTED)
            for training_corpus in CORPUS_NAMES
        ))
        # Add unsupervised
        result.extend((
            BOOTWORK + "/resamples/" + nick + "/{cmp_var,[^/]+}.pkl"
            for nick in nicks_of_selected(UNSUP_SELECTED)
        ))
        return result
    elif wildcards.cmp == "awe_nn":
        train, test = wildcards.cmp_var.split("-")
        return [BOOTWORK + "/resamples/{cmp,[^/\.]+}." + var + "/" + sup_var() for var in AWE_NN_VAR]
    elif wildcards.cmp == "supwsd":
        return [BOOTWORK + "/resamples/{cmp,[^/\.]+}." + var + ".x1st/" + sup_var() for var in SUPWSD_VAR]
    elif wildcards.cmp == "lesk_pp":
        return [BOOTWORK + "/resamples/{cmp,[^/\.]+}." + var + "/" + unsup_var() for var in LESK_PP_VAR]
    else: # lesk
        freq = ".freq" in wildcards.cmp_var
        if freq:
            corpus = wildcards.cmp_var.replace(".freq", "")
            vars = [var for var in LESK_VAR if ".freq" in var]
        else:
            corpus = wildcards.cmp_var
            vars = [var for var in LESK_VAR if ".freq" not in var]
        return [BOOTWORK + "/resamples/{cmp,[^/\.]+}." + var + "/" + corpus + "-dev.pkl" for var in vars]

# Top levels

def over_boot_results():
    for test_corpus in CORPUS_NAMES:
        for test_seg in TEST_SEGMENT:
            yield BOOTWORK + "/over/nsd-best-" + test_corpus  + "-" + test_seg + ".db"
            yield BOOTWORK + "/over/cld-" + test_corpus  + "-" + test_seg + ".db"

def awe_boot_results():
    for train_corpus in CORPUS_DIR_MAP:
    	for test_corpus in CORPUS_DIR_MAP:
            yield BOOTWORK + "/awe_nn/nsd-best-" + train_corpus  + "-" + test_corpus + ".db"

def supwsd_boot_results():
    for train_corpus in CORPUS_DIR_MAP:
        for test_corpus in CORPUS_DIR_MAP:
            yield BOOTWORK + "/supwsd/nsd-best-" + train_corpus  + "-" + test_corpus + ".db"

def lesk_boot_results():
    for freq in [".freq", ""]:
        for test_corpus in CORPUS_DIR_MAP:
            yield BOOTWORK + "/lesk/nsd-best-" + test_corpus + freq + ".db"

def lesk_pp_boot_results():
    for test_corpus in CORPUS_DIR_MAP:
        yield BOOTWORK + "/lesk_pp/nsd-best-" + test_corpus + ".db"

rule bootstrap_over:
    input: list(over_boot_results())

rule bootstrap_awe_dev:
    input: list(awe_boot_results())

rule bootstrap_supwsd_dev:
    input: list(supwsd_boot_results())

rule bootstrap_lesk_dev:
    input: list(lesk_boot_results())

rule bootstrap_lesk_pp_dev:
    input: list(lesk_pp_boot_results())

rule bootstrap_all:
    input: list(over_boot_results()) + list(awe_boot_results()) + list(supwsd_boot_results()) + list(lesk_boot_results())

# Schedule

rule create_schedule:
    output:
        BOOTWORK + "/schedules/{test_corpus,[^-/.]+}/{gold_key,.+}.pkl"
    input:
        lambda wildcards: CORPUS_DIR_MAP[wildcards.test_corpus]() + "/" + wildcards.gold_key
    shell:
        "python scripts/expc.py sigtest create-schedule" +
        " --seed " + SEED +
        " --iters " + ITERS +
        " {input} {output}"

# Bootstrapping sup
rule resample_sup:
    output: BOOTWORK + "/resamples/{nick,[^-/]+}/{train_corpus,[^-/.]+}-{train_seg,[^-/.]+}/{test_corpus,[^-/.]+}-{test_seg,[^-/.]+}.pkl"
    input:
        schedule=BOOTWORK + "/schedules/{test_corpus}/{test_seg}/corpus.sup.key.pkl",
        gold=lambda wildcards: CORPUS_DIR_MAP[wildcards.test_corpus]() + "/{test_seg}/corpus.sup.key",
    run:
        train_base = GUESS + "/{wildcards.nick}/{wildcards.train_corpus}-{wildcards.train_seg}"
        if not exists(train_base):
            train_base += "f"
        shell(
            "python scripts/expc.py sigtest resample" +
            " {output} {input.gold} " +
            train_base + "/{wildcards.test_corpus}-{wildcards.test_seg} " +
            RESULTS + "/{wildcards.nick}/{wildcards.train_corpus}-{wildcards.train_seg}/{wildcards.test_corpus}-{wildcards.test_seg}.db" +
            " {input.schedule}"
        )

# Bootstrapping unsup
rule resample_unsup:
    output: BOOTWORK + "/resamples/{nick,[^/]+}/{test_corpus,[^-/.]+}-{test_seg,[^-/.]+}.pkl"
    input:
        schedule=BOOTWORK + "/schedules/{test_corpus}/{test_seg}/corpus.sup.key.pkl",
        gold=lambda wildcards: CORPUS_DIR_MAP[wildcards.test_corpus]() + "/{test_seg}/corpus.sup.key",
    shell:
        "python scripts/expc.py sigtest resample" +
	" {output} {input.gold} " +
        GUESS + "/{wildcards.nick}/{wildcards.test_corpus}-{wildcards.test_seg} " +
        RESULTS + "/{wildcards.nick}/{wildcards.test_corpus}-{wildcards.test_seg}.db" +
        " {input.schedule} "

# Compare f1s
rule compare_f1s:
    input: cmp_inputs
    output: BOOTWORK + "/{cmp,[^/\.]+}/cmp-{cmp_var,[^/]+}.db"
    shell:
        "python scripts/expc.py sigtest compare-resampled {input} {output}"


# Get info about NSD from best
rule nsd_from_best:
    input: BOOTWORK + "/{cmp,[^/\.]+}/cmp-{cmp_var,[^/]+}.db"
    output: BOOTWORK + "/{cmp,[^/\.]+}/nsd-best-{cmp_var,[^/]+}.db"
    shell:
        "python scripts/expc.py sigtest nsd-from-best {input} {output}"


# Get CLD
rule cld:
    input: BOOTWORK + "/{cmp,[^/\.]+}/cmp-{cmp_var,[^/]+}.db"
    output: BOOTWORK + "/{cmp,[^/\.]+}/cld-{cmp_var,[^/]+}.db"
    shell:
        "python scripts/expc.py sigtest cld {input} {output}"
