## Bootstrapping

cnf("BOOTWORK", WORK + "/bootstrap")
cnf("SEED", "42")
cnf("ITERS", "100000")

AWE_NN_VAR, = glob_wildcards(GUESS + "/awe_nn.{awe_nn_var,[^/]+}/")
LESK_VAR, = glob_wildcards(GUESS + "/lesk.{lesk_nn_var,[^/]+}/")

def cmp_inputs(wildcards):
    if wildcards.exp == "awe_nn":
        return [BOOTWORK + "/resamples/{exp,[^/\.]+}." + var + "/{corpora,[^/]+}.pkl" for var in AWE_NN_VAR]
    else:
        freq = ".freq" in wildcards.corpora
        if freq:
            corpus = wildcards.corpora.replace(".freq", "")
            vars = [var for var in LESK_VAR if ".freq" in var]
        else:
            corpus = wildcards.corpora
            vars = [var for var in LESK_VAR if ".freq" not in var]
        return [BOOTWORK + "/resamples/{exp,[^/\.]+}." + var + "/" + corpus + ".pkl" for var in vars]

def awe_boot_results():
    for train_corpus in CORPUS_DIR_MAP:
    	for test_corpus in CORPUS_DIR_MAP:
            yield BOOTWORK + "/awe_nn/nsd-best-" + train_corpus  + "-" + test_corpus + ".db"

def lesk_boot_results():
    for freq in [".freq", ""]:
        for test_corpus in CORPUS_DIR_MAP:
            yield BOOTWORK + "/lesk/nsd-best-" + test_corpus + freq + ".db"

rule bootstrap_awe_dev:
    input: list(awe_boot_results())

rule bootstrap_lesk_dev:
    input: list(lesk_boot_results())

rule bootstrap_all:
    input: list(awe_boot_results()) + list(lesk_boot_results())

rule create_schedule:
    output:
        BOOTWORK + "/schedules/{test_corpus,[^-/.]+}/{gold_key,.+}.pkl"
    input:
        lambda wildcards: CORPUS_DIR_MAP[wildcards.test_corpus]() + "/" + wildcards.gold_key
    shell:
        "python scripts/expc.py sigtest create-schedule" +
        " --seed " + SEED +
        " --iters " + ITERS +
        " {input} {output}"

# Bootstrapping AWE on dev data
rule resample_awe_dev:
    output: BOOTWORK + "/resamples/awe_nn.{var,[^-/]+}/{train_corpus,[^-/.]+}-{test_corpus,[^-/.]+}.pkl"
    input:
        schedule=BOOTWORK + "/schedules/{test_corpus}/dev/corpus.sup.key.pkl",
        gold=lambda wildcards: CORPUS_DIR_MAP[wildcards.test_corpus]() + "/dev/corpus.sup.key",
    shell:
        "python scripts/expc.py sigtest resample" +
	" {output} {input.gold} " +
        GUESS + "/awe_nn.{wildcards.var}/{wildcards.train_corpus}-train/{wildcards.test_corpus}-dev " +
        RESULTS + "/awe_nn.{wildcards.var}/{wildcards.train_corpus}-train/{wildcards.test_corpus}-dev.db" +
        " {input.schedule}"

# Bootstrapping Lesk on dev data
rule resample_lesk_dev:
    output: BOOTWORK + "/resamples/lesk.{var,[^/]+}/{test_corpus,[^-/.]+}.pkl"
    input:
        schedule=BOOTWORK + "/schedules/{test_corpus}/dev/corpus.sup.key.pkl",
        gold=lambda wildcards: CORPUS_DIR_MAP[wildcards.test_corpus]() + "/dev/corpus.sup.key",
    shell:
        "python scripts/expc.py sigtest resample" +
	" {output} {input.gold} " +
        GUESS + "/lesk.{wildcards.var}/{wildcards.test_corpus}-dev " +
        RESULTS + "/lesk.{wildcards.var}/{wildcards.test_corpus}-dev.db" +
        " {input.schedule} "

# Compare f1s
rule compare_f1s:
    input: cmp_inputs
    output: BOOTWORK + "/{exp,[^/\.]+}/cmp-{corpora,[^/]+}.db"
    shell:
        "python scripts/expc.py sigtest compare-resampled {input} {output}"


# Get info about NSD from best
rule nsd_from_best:
    input:
        BOOTWORK + "/{exp,[^/\.]+}/cmp-{corpora,[^/]+}.db"
    output: BOOTWORK + "/{exp,[^/\.]+}/nsd-best-{corpora,[^/]+}.db"
    shell:
        "python scripts/expc.py sigtest nsd-from-best {input} {output}"
